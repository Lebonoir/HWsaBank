/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication3;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author quibo
 */
public class BankMenu extends javax.swing.JFrame {
private HashMap<String, Double> balances;
 private String username;   

    /**
     * Creates new form BankMenu
     */
    public BankMenu() {
        initComponents();
    }
public void setBalances(HashMap<String, Double> balances) {
        this.balances = balances;
}

    /**
     *
     * @param username
     */
    public BankMenu(String username) {
    this.username = username;
    initComponents();
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CheckBalanceBtn = new javax.swing.JButton();
        Withdraw = new javax.swing.JButton();
        DepositBtn = new javax.swing.JButton();
        TransferAmmountBtn = new javax.swing.JButton();
        Exitbtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        jLabel1.setText("BANK SYSTEM");

        CheckBalanceBtn.setText("Check Balance");
        CheckBalanceBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBalanceBtnActionPerformed(evt);
            }
        });

        Withdraw.setText("Withdraw");
        Withdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawActionPerformed(evt);
            }
        });

        DepositBtn.setText("Deposit");
        DepositBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositBtnActionPerformed(evt);
            }
        });

        TransferAmmountBtn.setText("Transfer ammount");
        TransferAmmountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferAmmountBtnActionPerformed(evt);
            }
        });

        Exitbtn.setText("Exit");
        Exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitbtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Exitbtn))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBalanceBtn)
                            .addComponent(DepositBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TransferAmmountBtn)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(Withdraw)))))
                .addGap(80, 80, 80))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckBalanceBtn)
                    .addComponent(Withdraw))
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DepositBtn)
                    .addComponent(TransferAmmountBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(Exitbtn)
                .addGap(58, 58, 58))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitbtnActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "ITE 232 LEBRON SUAREZ");
        System.exit(0);
        
    }//GEN-LAST:event_ExitbtnActionPerformed

    private void CheckBalanceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBalanceBtnActionPerformed
        // TODO add your handling code here:
        if (balances.containsKey(username)) {
            double balance = balances.get(username);
            JOptionPane.showMessageDialog(null, "The Balance of" + username + ":Php" + balance);
        }
    }//GEN-LAST:event_CheckBalanceBtnActionPerformed

    private void WithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawActionPerformed
        // TODO add your handling code here:
        String withdrawAmountString = JOptionPane.showInputDialog(null, "Enter amount to withdraw:");
        
        if (withdrawAmountString == null) {
        return; 
    }
        double withdrawAmount;
        try {
        withdrawAmount = Double.parseDouble(withdrawAmountString);
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
        return; 
    }
        if (withdrawAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Withdrawal amount must be a positive number.");
        return; // Exit the method if the withdrawal amount is not positive
    }
         if (balances.containsKey(username)) {
        double currentBalance = balances.get(username);
        
         
         if (withdrawAmount > currentBalance) {
            JOptionPane.showMessageDialog(null, "Insufficient funds. You cannot withdraw more than your current balance.");
            return; 
        }
          double newBalance = currentBalance - withdrawAmount;
         
         balances.put(username, newBalance);
         JOptionPane.showMessageDialog(null, "Withdrawal successful! Your new balance is: $" + newBalance);
    } else {
             JOptionPane.showMessageDialog(null, "No balance found for " + username);
    
         }
    }//GEN-LAST:event_WithdrawActionPerformed

    private void DepositBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositBtnActionPerformed
        // TODO add your handling code here:
         String DepositAmount = JOptionPane.showInputDialog(null, "Enter amount to deposit:");
         
         if(DepositAmount == null){
             return; 
         }
         double depositAmount;
         try {
             depositAmount = Double.parseDouble(DepositAmount);
         } catch (NumberFormatException ex){ 
             JOptionPane.showMessageDialog(null, "Invalid amount entered. Please enter a valid number.");
             return;
         }
         if (depositAmount <= 0) {
        JOptionPane.showMessageDialog(null, "Deposit amount must be a positive number.");
        return;
         }
         
         if (balances.containsKey(username)) {
        double currentBalance = balances.get(username);
         double newBalance = currentBalance + depositAmount;
         balances.put(username, newBalance);
         
        }else{
             JOptionPane.showMessageDialog(null, "No balance found for " + username);
         }
    }//GEN-LAST:event_DepositBtnActionPerformed

    private void TransferAmmountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferAmmountBtnActionPerformed
        // TODO add your handling code here:
        String accountN;
        do{
         accountN = JOptionPane.showInputDialog(null, "Enter the account username:");
         if (accountN == null){
             return;
         }else if(accountN.isEmpty()){
             JOptionPane.showMessageDialog(null, "Please enter an account name you want to transfer.", "Error", JOptionPane.ERROR_MESSAGE);
         }
        }while(accountN.isEmpty());
         String TransferAmount = JOptionPane.showInputDialog(null, "Enter amount to transfer:");
         
          if (TransferAmount == null) {
            return; 
            }
          double transferAmount;
          
          try{
              transferAmount = Double.parseDouble(TransferAmount);
          } catch (NumberFormatException ex) {
              JOptionPane.showMessageDialog(null, "Please enter a valid amount.", "Error", JOptionPane.ERROR_MESSAGE);
                return; 
          }
          if (transferAmount <= 0) {
            JOptionPane.showMessageDialog(null, "Transfer amount must be a positive number.");
               return; 
                 }
          if (balances.containsKey(username)) {
            double currentBalance = balances.get(username);
             if (transferAmount > currentBalance) {
             JOptionPane.showMessageDialog(null, "Insufficient funds. You cannot transfer more than your current balance.");
                return; 
            }
             double newBalance = currentBalance - transferAmount;
             balances.put(username, newBalance);
             JOptionPane.showMessageDialog(null, "Transfer successful! Your new balance is: $" + newBalance);
            } else {
            JOptionPane.showMessageDialog(null, "No balance found for " + username);
            }
          
        
    }//GEN-LAST:event_TransferAmmountBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BankMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BankMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BankMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BankMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BankMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CheckBalanceBtn;
    private javax.swing.JButton DepositBtn;
    private javax.swing.JButton Exitbtn;
    private javax.swing.JButton TransferAmmountBtn;
    private javax.swing.JButton Withdraw;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
